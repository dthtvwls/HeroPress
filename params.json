{"name":"Heropress","tagline":"Micro CMS","body":"# HeroPress\r\n\r\n[![Build Status](https://travis-ci.org/dthtvwls/HeroPress.svg?branch=master)](https://travis-ci.org/dthtvwls/HeroPress)\r\n\r\nA micro CMS designed to cause as little cognitive overhead as possible to my workflow\r\nof creating marketing sites and iterating design and content.\r\n\r\nHeroPress is really a thin layer over the Slim framework, that manages slug => content pairs via PDO.\r\nThe PDO abstraction makes it simple to use Heroku's Postgres on Heroku, but use SQLite in development.\r\nThis is valuable to me because as long as I have access to a relatively recent Mac, I'm good to go.\r\n\r\nIt also provides templating via Handlebars, which I prefer because I can reuse them in JS.\r\n\r\nThe other big win is CKEditor's inline mode, which I use to allow authenticated users to update\r\ncontent with a solid WYSIWYG editor and no backend whatsoever.\r\n\r\nSee public/index.php for a good default setup.\r\n\r\n## Setup\r\n\r\nAfter cloning:\r\n\r\n`sqlite3 db/db.sqlite3 < db/schema.sql`\r\n\r\n`./composer install`\r\n\r\n`./composer test` (optional, run tests)\r\n\r\n`./composer start` (to start dev server on port 8888)\r\n\r\nThere is a script called _create_user.php that can create users from the command line. There should be a cleaner way to do this.\r\n\r\n## Deployment\r\n\r\n`heroku create` (or `heroku create *mysitename*`)\r\n\r\n`heroku addons:add heroku-postgresql`\r\n\r\n`heroku pg:psql < db/schema.sql` (requires psql command line client, try `brew install postgresql` otherwise you're on your own)\r\n\r\n`git push heroku master`\r\n\r\nhttps://dashboard.heroku.com/new?template=https://github.com/dthtvwls/HeroPress\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}